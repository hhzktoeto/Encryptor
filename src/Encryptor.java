import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class Encryptor {
    
	private Scanner scanner;
	private ArrayList<Character> list;
	private ArrayList<Character> key;
	private char character;
	private char[] letters;
	
	/*
	 * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —à–∏—Ñ—Ä–∞—Ç–æ—Ä–∞
	 * Encryptor constructor
	 */	
		Encryptor() {
		scanner = new Scanner(System.in);
		list = new ArrayList();
		key = new ArrayList();
		
		/*
		 * –ó–∞–ø–æ–ª–Ω—è–µ–º –ª–∏—Å—Ç –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ ASCII —Ç–∞–±–ª–∏—Ü—ã (–û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç).
		 * Filling a list with ASCII elements (Common symbols, English alphabet).
		 */	

		character = ' ';
		
		for (int i = 32; i < 127; i++) {
			list.add(Character.valueOf(character));
			character++;
		}
		askQuestion();
	}
	
	private void askQuestion(){
		/*
		 * –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥, –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
		 * Welcome method, choosing what to do next
		 */
			while (true) {
			System.out.println("-------------------------------------------");
			System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ / Choose whan you want to do:");
			System.out.println("1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è / Generate new encryption key;");
			System.out.println("2. –í—ã–≤–µ—Å—Ç–∏ –∫–ª—é—á –Ω–∞ —ç–∫—Ä–∞–Ω / Print existing key in console;"); 
			System.out.println("3. –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ / Encrypt the message;"); 
			System.out.println("4. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ / Decrypt the message;");
			System.out.println("5. –í—ã—Ö–æ–¥ / Exit;");
			String response = scanner.nextLine();
			switch (response) {
			case "1":
				newKey();
				break;
			case "2":
				getKey();
				break;
			case "3":
				encrypt();
				break;
			case "4":
				decrypt();
				break;
			case "5":
				quit();
				break;
			default:
				System.out.println("–í–∞—Ä–∏–∞–Ω—Ç–∞ " + response + " –Ω–µ—Ç –≤ –º–µ–Ω—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç 1 –¥–æ 5.\n"
						+ "There is no option such as " + response + " in menu. Please choose option 1 to 5.");
			}
		}
	}
	private void newKey() {
		
		/*  
		 * –û—á–∏—â–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–∞—Ö
		 * Clearing an information about existing key
		 */
		
		character = ' ';
		key.clear();	
		
		key = new ArrayList(list);
		Collections.shuffle(key);
		System.out.println("–ö–ª—é—á –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω / Key was generated.");
		
	}
	private void getKey() {
		
		/* 
		 * –í—ã–≤–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
		 * Printing generated key in console
		 * */
		
		System.out.println("–ö–ª—é—á / Key:");
		for (Character x : key) {
			System.out.print(x);
		}
		System.out.println();
		System.out.println("===========================        =============================\n" +
				   "–ù–ï –ó–ê–ë–£–î–¨–¢–ï –°–û–•–†–ê–ù–ò–¢–¨ –ö–õ–Æ–ß!        DON'T FORGET TO SAVE THE KEY!\n" +
				   "===========================        =============================");
	}
	
	private void insertKey() {
		
		key.clear();
		System.out.println("–í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á / Paste a key:");
		char[] response = (scanner.nextLine()).toCharArray();
		int length = response.length;
		for (int i = 0; i < length; i++) {
			key.add(response[i]);
		}
	}
	
	private void encrypt() {
		
		System.out.println("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ / Enter a message");
		String message = scanner.nextLine();
		
		letters = message.toCharArray();
		int length = letters.length;
		int size = list.size();
		
		for (int i = 0; i < length; i++) {
			for (int j = 0; j < size; j++) {
				if (letters[i] == list.get(j)) {
					letters[i] = key.get(j);
					break;
				}
			}
		}
		System.out.println("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ / Encrypted message:");
		for (char x : letters) {
			System.out.print(x);
		}
		System.out.println();
		
	}
	private void decrypt() {
		
		insertKey();
		
		System.out.println("–í—Å—Ç–∞–≤—å—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ / Paste an encrypted message:");
		String message = scanner.nextLine();
		
		letters = message.toCharArray();
		int length = letters.length;
		int size = key.size();
		
		for (int i = 0; i < length; i++) {
			for (int j = 0; j < size; j++) {
				if (letters[i] == key.get(j)) {
					letters[i] = list.get(j);
					break;
				}
			}
		}
		System.out.println("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ / Encrypted message: ");
		for (char x : letters) {
			System.out.print(x);
		}
		System.out.println();
		
	}
	private void quit() {
		System.out.println("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –º–æ–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π üòÄ\n" +
						   "–ú–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –º–µ–Ω—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ @hhzktoeto\n");
		System.out.println("Thank for using my programm üòÄ\n" +
				   		   "Feel free to contact me on Telegramm @hhzktoeto\n");
		System.exit(0);
	}
}